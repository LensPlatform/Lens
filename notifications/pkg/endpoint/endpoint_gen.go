// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	service "LensPlatform/Lens/notifications/pkg/service"
	endpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	SendEmailEndpoint                  endpoint.Endpoint
	SendWelcomeToLensEmailEndpoint     endpoint.Endpoint
	SendPasswordChangeEmailEndpoint    endpoint.Endpoint
	SendEmailAccountResetEmailEndpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.NotificationsService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		SendEmailAccountResetEmailEndpoint: MakeSendEmailAccountResetEmailEndpoint(s),
		SendEmailEndpoint:                  MakeSendEmailEndpoint(s),
		SendPasswordChangeEmailEndpoint:    MakeSendPasswordChangeEmailEndpoint(s),
		SendWelcomeToLensEmailEndpoint:     MakeSendWelcomeToLensEmailEndpoint(s),
	}
	for _, m := range mdw["SendEmail"] {
		eps.SendEmailEndpoint = m(eps.SendEmailEndpoint)
	}
	for _, m := range mdw["SendWelcomeToLensEmail"] {
		eps.SendWelcomeToLensEmailEndpoint = m(eps.SendWelcomeToLensEmailEndpoint)
	}
	for _, m := range mdw["SendPasswordChangeEmail"] {
		eps.SendPasswordChangeEmailEndpoint = m(eps.SendPasswordChangeEmailEndpoint)
	}
	for _, m := range mdw["SendEmailAccountResetEmail"] {
		eps.SendEmailAccountResetEmailEndpoint = m(eps.SendEmailAccountResetEmailEndpoint)
	}
	return eps
}
