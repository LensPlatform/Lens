// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	service "github.com/LensPlatform/Lens/social/pkg/service"
	endpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	FollowUserEndpoint     endpoint.Endpoint
	UnFollowerUserEndpoint endpoint.Endpoint
	FollowGroupEndpoint    endpoint.Endpoint
	UnFollowGroupEndpoint  endpoint.Endpoint
	FollowTeamEndpoint     endpoint.Endpoint
	UnFollowTeamEndpoint   endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.SocialService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		FollowGroupEndpoint:    MakeFollowGroupEndpoint(s),
		FollowTeamEndpoint:     MakeFollowTeamEndpoint(s),
		FollowUserEndpoint:     MakeFollowUserEndpoint(s),
		UnFollowGroupEndpoint:  MakeUnFollowGroupEndpoint(s),
		UnFollowTeamEndpoint:   MakeUnFollowTeamEndpoint(s),
		UnFollowerUserEndpoint: MakeUnFollowerUserEndpoint(s),
	}
	for _, m := range mdw["FollowUser"] {
		eps.FollowUserEndpoint = m(eps.FollowUserEndpoint)
	}
	for _, m := range mdw["UnFollowerUser"] {
		eps.UnFollowerUserEndpoint = m(eps.UnFollowerUserEndpoint)
	}
	for _, m := range mdw["FollowGroup"] {
		eps.FollowGroupEndpoint = m(eps.FollowGroupEndpoint)
	}
	for _, m := range mdw["UnFollowGroup"] {
		eps.UnFollowGroupEndpoint = m(eps.UnFollowGroupEndpoint)
	}
	for _, m := range mdw["FollowTeam"] {
		eps.FollowTeamEndpoint = m(eps.FollowTeamEndpoint)
	}
	for _, m := range mdw["UnFollowTeam"] {
		eps.UnFollowTeamEndpoint = m(eps.UnFollowTeamEndpoint)
	}
	return eps
}
