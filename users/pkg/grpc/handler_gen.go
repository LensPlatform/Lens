// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package grpc

import (
	endpoint "github.com/LensPlatform/Lens/users/pkg/endpoint"
	pb "github.com/LensPlatform/Lens/users/pkg/grpc/pb"
	grpc "github.com/go-kit/kit/transport/grpc"
)

// NewGRPCServer makes a set of endpoints available as a gRPC AddServer
type grpcServer struct {
	createUserAccount          grpc.Handler
	updateUserAccount          grpc.Handler
	deleteUserAccount          grpc.Handler
	getUserAccount             grpc.Handler
	createTeamsAccount         grpc.Handler
	updateTeamsAccount         grpc.Handler
	deleteTeamsAccount         grpc.Handler
	getTeamsAccount            grpc.Handler
	addUserToTeamsAccount      grpc.Handler
	deleteUserFromTeamsAccount grpc.Handler
	createGroup                grpc.Handler
	subscribeToGroup           grpc.Handler
	unsubscribeFromGroup       grpc.Handler
	deleteGroup                grpc.Handler
	updateGroup                grpc.Handler
	getGroupByID               grpc.Handler
	getGroupByName             grpc.Handler
	isGroupPrivate             grpc.Handler
}

func NewGRPCServer(endpoints endpoint.Endpoints, options map[string][]grpc.ServerOption) pb.UsersServer {
	return &grpcServer{
		addUserToTeamsAccount:      makeAddUserToTeamsAccountHandler(endpoints, options["AddUserToTeamsAccount"]),
		createGroup:                makeCreateGroupHandler(endpoints, options["CreateGroup"]),
		createTeamsAccount:         makeCreateTeamsAccountHandler(endpoints, options["CreateTeamsAccount"]),
		createUserAccount:          makeCreateUserAccountHandler(endpoints, options["CreateUserAccount"]),
		deleteGroup:                makeDeleteGroupHandler(endpoints, options["DeleteGroup"]),
		deleteTeamsAccount:         makeDeleteTeamsAccountHandler(endpoints, options["DeleteTeamsAccount"]),
		deleteUserAccount:          makeDeleteUserAccountHandler(endpoints, options["DeleteUserAccount"]),
		deleteUserFromTeamsAccount: makeDeleteUserFromTeamsAccountHandler(endpoints, options["DeleteUserFromTeamsAccount"]),
		getGroupByID:               makeGetGroupByIDHandler(endpoints, options["GetGroupByID"]),
		getGroupByName:             makeGetGroupByNameHandler(endpoints, options["GetGroupByName"]),
		getTeamsAccount:            makeGetTeamsAccountHandler(endpoints, options["GetTeamsAccount"]),
		getUserAccount:             makeGetUserAccountHandler(endpoints, options["GetUserAccount"]),
		isGroupPrivate:             makeIsGroupPrivateHandler(endpoints, options["IsGroupPrivate"]),
		subscribeToGroup:           makeSubscribeToGroupHandler(endpoints, options["SubscribeToGroup"]),
		unsubscribeFromGroup:       makeUnsubscribeFromGroupHandler(endpoints, options["UnsubscribeFromGroup"]),
		updateGroup:                makeUpdateGroupHandler(endpoints, options["UpdateGroup"]),
		updateTeamsAccount:         makeUpdateTeamsAccountHandler(endpoints, options["UpdateTeamsAccount"]),
		updateUserAccount:          makeUpdateUserAccountHandler(endpoints, options["UpdateUserAccount"]),
	}
}
