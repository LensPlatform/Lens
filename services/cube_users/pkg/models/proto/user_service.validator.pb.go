// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/user_service.proto

package model

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *GetUsersSearchRequest) Validate() error {
	return nil
}
func (this *Uint32UserTypeRequest) Validate() error {
	return nil
}
func (this *Uint32TeamTypeRequest) Validate() error {
	return nil
}
func (this *Uint32GroupTypeRequest) Validate() error {
	return nil
}
func (this *StringUserTypeRequest) Validate() error {
	return nil
}
func (this *StringTeamTypeRequest) Validate() error {
	return nil
}
func (this *StringGroupTypeRequest) Validate() error {
	return nil
}
func (this *UserResponse) Validate() error {
	for _, item := range this.Users {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Users", err)
			}
		}
	}
	return nil
}
func (this *UserRequest) Validate() error {
	if this.User != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.User); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("User", err)
		}
	}
	return nil
}
func (this *TeamResponse) Validate() error {
	for _, item := range this.Teams {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Teams", err)
			}
		}
	}
	return nil
}
func (this *TeamRequest) Validate() error {
	if this.Team != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Team); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Team", err)
		}
	}
	return nil
}
func (this *GroupResponse) Validate() error {
	for _, item := range this.Groups {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Groups", err)
			}
		}
	}
	return nil
}
func (this *GroupRequest) Validate() error {
	if this.Group != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Group); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Group", err)
		}
	}
	return nil
}
func (this *UpdateOrCreateEntityResponse) Validate() error {
	return nil
}
