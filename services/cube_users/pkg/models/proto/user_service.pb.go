// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.10.0
// source: proto/user_service.proto

package model

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetUsersSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryMessage string      `protobuf:"bytes,1,opt,name=QueryMessage,proto3" json:"QueryMessage,omitempty"` // investor or startup
	MaxResults   int32       `protobuf:"varint,2,opt,name=MaxResults,proto3" json:"MaxResults,omitempty"`
	UserType     AccountType `protobuf:"varint,3,opt,name=userType,proto3,enum=AccountType" json:"userType,omitempty"`
}

func (x *GetUsersSearchRequest) Reset() {
	*x = GetUsersSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersSearchRequest) ProtoMessage() {}

func (x *GetUsersSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersSearchRequest.ProtoReflect.Descriptor instead.
func (*GetUsersSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetUsersSearchRequest) GetQueryMessage() string {
	if x != nil {
		return x.QueryMessage
	}
	return ""
}

func (x *GetUsersSearchRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *GetUsersSearchRequest) GetUserType() AccountType {
	if x != nil {
		return x.UserType
	}
	return AccountType_RegularUser
}

type Uint32UserTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserType AccountType `protobuf:"varint,2,opt,name=userType,proto3,enum=AccountType" json:"userType,omitempty"`
}

func (x *Uint32UserTypeRequest) Reset() {
	*x = Uint32UserTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32UserTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32UserTypeRequest) ProtoMessage() {}

func (x *Uint32UserTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32UserTypeRequest.ProtoReflect.Descriptor instead.
func (*Uint32UserTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{1}
}

func (x *Uint32UserTypeRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Uint32UserTypeRequest) GetUserType() AccountType {
	if x != nil {
		return x.UserType
	}
	return AccountType_RegularUser
}

type Uint32TeamTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint32          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserType TeamAccountType `protobuf:"varint,2,opt,name=userType,proto3,enum=TeamAccountType" json:"userType,omitempty"`
}

func (x *Uint32TeamTypeRequest) Reset() {
	*x = Uint32TeamTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32TeamTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32TeamTypeRequest) ProtoMessage() {}

func (x *Uint32TeamTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32TeamTypeRequest.ProtoReflect.Descriptor instead.
func (*Uint32TeamTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{2}
}

func (x *Uint32TeamTypeRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Uint32TeamTypeRequest) GetUserType() TeamAccountType {
	if x != nil {
		return x.UserType
	}
	return TeamAccountType_StartupTeam
}

type Uint32GroupTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *Uint32GroupTypeRequest) Reset() {
	*x = Uint32GroupTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32GroupTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32GroupTypeRequest) ProtoMessage() {}

func (x *Uint32GroupTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32GroupTypeRequest.ProtoReflect.Descriptor instead.
func (*Uint32GroupTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{3}
}

func (x *Uint32GroupTypeRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type StringUserTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryMessage string      `protobuf:"bytes,1,opt,name=QueryMessage,proto3" json:"QueryMessage,omitempty"`
	UserType     AccountType `protobuf:"varint,3,opt,name=userType,proto3,enum=AccountType" json:"userType,omitempty"`
}

func (x *StringUserTypeRequest) Reset() {
	*x = StringUserTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringUserTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringUserTypeRequest) ProtoMessage() {}

func (x *StringUserTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringUserTypeRequest.ProtoReflect.Descriptor instead.
func (*StringUserTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{4}
}

func (x *StringUserTypeRequest) GetQueryMessage() string {
	if x != nil {
		return x.QueryMessage
	}
	return ""
}

func (x *StringUserTypeRequest) GetUserType() AccountType {
	if x != nil {
		return x.UserType
	}
	return AccountType_RegularUser
}

type StringTeamTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryMessage string          `protobuf:"bytes,1,opt,name=QueryMessage,proto3" json:"QueryMessage,omitempty"`
	UserType     TeamAccountType `protobuf:"varint,3,opt,name=userType,proto3,enum=TeamAccountType" json:"userType,omitempty"`
}

func (x *StringTeamTypeRequest) Reset() {
	*x = StringTeamTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringTeamTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringTeamTypeRequest) ProtoMessage() {}

func (x *StringTeamTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringTeamTypeRequest.ProtoReflect.Descriptor instead.
func (*StringTeamTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{5}
}

func (x *StringTeamTypeRequest) GetQueryMessage() string {
	if x != nil {
		return x.QueryMessage
	}
	return ""
}

func (x *StringTeamTypeRequest) GetUserType() TeamAccountType {
	if x != nil {
		return x.UserType
	}
	return TeamAccountType_StartupTeam
}

type StringGroupTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryMessage string `protobuf:"bytes,1,opt,name=QueryMessage,proto3" json:"QueryMessage,omitempty"`
}

func (x *StringGroupTypeRequest) Reset() {
	*x = StringGroupTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringGroupTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringGroupTypeRequest) ProtoMessage() {}

func (x *StringGroupTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringGroupTypeRequest.ProtoReflect.Descriptor instead.
func (*StringGroupTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{6}
}

func (x *StringGroupTypeRequest) GetQueryMessage() string {
	if x != nil {
		return x.QueryMessage
	}
	return ""
}

type UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=Users,proto3" json:"Users,omitempty"`
	Error string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{7}
}

func (x *UserResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *User       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	UserType AccountType `protobuf:"varint,2,opt,name=userType,proto3,enum=AccountType" json:"userType,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{8}
}

func (x *UserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserRequest) GetUserType() AccountType {
	if x != nil {
		return x.UserType
	}
	return AccountType_RegularUser
}

type TeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=Teams,proto3" json:"Teams,omitempty"`
	Error string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TeamResponse) Reset() {
	*x = TeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamResponse) ProtoMessage() {}

func (x *TeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamResponse.ProtoReflect.Descriptor instead.
func (*TeamResponse) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{9}
}

func (x *TeamResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *TeamResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team     *Team           `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	TeamType TeamAccountType `protobuf:"varint,2,opt,name=teamType,proto3,enum=TeamAccountType" json:"teamType,omitempty"`
}

func (x *TeamRequest) Reset() {
	*x = TeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRequest) ProtoMessage() {}

func (x *TeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRequest.ProtoReflect.Descriptor instead.
func (*TeamRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{10}
}

func (x *TeamRequest) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TeamRequest) GetTeamType() TeamAccountType {
	if x != nil {
		return x.TeamType
	}
	return TeamAccountType_StartupTeam
}

type GroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*Group `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	Error  string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GroupResponse) Reset() {
	*x = GroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupResponse) ProtoMessage() {}

func (x *GroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupResponse.ProtoReflect.Descriptor instead.
func (*GroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{11}
}

func (x *GroupResponse) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GroupResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupRequest) Reset() {
	*x = GroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRequest) ProtoMessage() {}

func (x *GroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRequest.ProtoReflect.Descriptor instead.
func (*GroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{12}
}

func (x *GroupRequest) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type UpdateOrCreateEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool   `protobuf:"varint,1,opt,name=Successful,proto3" json:"Successful,omitempty"`
	Error      string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateOrCreateEntityResponse) Reset() {
	*x = UpdateOrCreateEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_user_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrCreateEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrCreateEntityResponse) ProtoMessage() {}

func (x *UpdateOrCreateEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_user_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrCreateEntityResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrCreateEntityResponse) Descriptor() ([]byte, []int) {
	return file_proto_user_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateOrCreateEntityResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *UpdateOrCreateEntityResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_proto_user_service_proto protoreflect.FileDescriptor

var file_proto_user_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f,
	0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67,
	0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x15, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x28, 0x0a, 0x16, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x15, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x69, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x16,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x52, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x41, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x2c,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x0d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x2c, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x54, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xa4, 0x0a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0c, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x0c, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0c, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79,
	0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x44, 0x12, 0x17, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0d, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0x07,
	0x5a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_user_service_proto_rawDescOnce sync.Once
	file_proto_user_service_proto_rawDescData = file_proto_user_service_proto_rawDesc
)

func file_proto_user_service_proto_rawDescGZIP() []byte {
	file_proto_user_service_proto_rawDescOnce.Do(func() {
		file_proto_user_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_user_service_proto_rawDescData)
	})
	return file_proto_user_service_proto_rawDescData
}

var file_proto_user_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_user_service_proto_goTypes = []interface{}{
	(*GetUsersSearchRequest)(nil),        // 0: GetUsersSearchRequest
	(*Uint32UserTypeRequest)(nil),        // 1: Uint32UserTypeRequest
	(*Uint32TeamTypeRequest)(nil),        // 2: Uint32TeamTypeRequest
	(*Uint32GroupTypeRequest)(nil),       // 3: Uint32GroupTypeRequest
	(*StringUserTypeRequest)(nil),        // 4: StringUserTypeRequest
	(*StringTeamTypeRequest)(nil),        // 5: StringTeamTypeRequest
	(*StringGroupTypeRequest)(nil),       // 6: StringGroupTypeRequest
	(*UserResponse)(nil),                 // 7: UserResponse
	(*UserRequest)(nil),                  // 8: UserRequest
	(*TeamResponse)(nil),                 // 9: TeamResponse
	(*TeamRequest)(nil),                  // 10: TeamRequest
	(*GroupResponse)(nil),                // 11: GroupResponse
	(*GroupRequest)(nil),                 // 12: GroupRequest
	(*UpdateOrCreateEntityResponse)(nil), // 13: UpdateOrCreateEntityResponse
	(AccountType)(0),                     // 14: AccountType
	(TeamAccountType)(0),                 // 15: TeamAccountType
	(*User)(nil),                         // 16: User
	(*Team)(nil),                         // 17: Team
	(*Group)(nil),                        // 18: Group
}
var file_proto_user_service_proto_depIdxs = []int32{
	14, // 0: GetUsersSearchRequest.userType:type_name -> AccountType
	14, // 1: Uint32UserTypeRequest.userType:type_name -> AccountType
	15, // 2: Uint32TeamTypeRequest.userType:type_name -> TeamAccountType
	14, // 3: StringUserTypeRequest.userType:type_name -> AccountType
	15, // 4: StringTeamTypeRequest.userType:type_name -> TeamAccountType
	16, // 5: UserResponse.Users:type_name -> User
	16, // 6: UserRequest.user:type_name -> User
	14, // 7: UserRequest.userType:type_name -> AccountType
	17, // 8: TeamResponse.Teams:type_name -> Team
	17, // 9: TeamRequest.team:type_name -> Team
	15, // 10: TeamRequest.teamType:type_name -> TeamAccountType
	18, // 11: GroupResponse.Groups:type_name -> Group
	18, // 12: GroupRequest.group:type_name -> Group
	1,  // 13: UsersService.GetUserByID:input_type -> Uint32UserTypeRequest
	4,  // 14: UsersService.GetUserByUsername:input_type -> StringUserTypeRequest
	4,  // 15: UsersService.GetUserByEmail:input_type -> StringUserTypeRequest
	0,  // 16: UsersService.GetUsersByType:input_type -> GetUsersSearchRequest
	8,  // 17: UsersService.CreateUser:input_type -> UserRequest
	8,  // 18: UsersService.UpdateUser:input_type -> UserRequest
	8,  // 19: UsersService.DeleteUser:input_type -> UserRequest
	1,  // 20: UsersService.DeleteProfileById:input_type -> Uint32UserTypeRequest
	10, // 21: UsersService.CreateTeam:input_type -> TeamRequest
	10, // 22: UsersService.UpdateTeam:input_type -> TeamRequest
	10, // 23: UsersService.DeleteTeam:input_type -> TeamRequest
	2,  // 24: UsersService.GetTeamByID:input_type -> Uint32TeamTypeRequest
	5,  // 25: UsersService.GetTeamByName:input_type -> StringTeamTypeRequest
	5,  // 26: UsersService.GetTeamByEmail:input_type -> StringTeamTypeRequest
	5,  // 27: UsersService.GetTeamsByType:input_type -> StringTeamTypeRequest
	5,  // 28: UsersService.GetTeamsByIndustry:input_type -> StringTeamTypeRequest
	12, // 29: UsersService.CreateGroup:input_type -> GroupRequest
	3,  // 30: UsersService.GetGroupByID:input_type -> Uint32GroupTypeRequest
	6,  // 31: UsersService.GetGroupByName:input_type -> StringGroupTypeRequest
	6,  // 32: UsersService.GetGroupsByType:input_type -> StringGroupTypeRequest
	12, // 33: UsersService.UpdateGroup:input_type -> GroupRequest
	12, // 34: UsersService.DeleteGroup:input_type -> GroupRequest
	7,  // 35: UsersService.GetUserByID:output_type -> UserResponse
	7,  // 36: UsersService.GetUserByUsername:output_type -> UserResponse
	7,  // 37: UsersService.GetUserByEmail:output_type -> UserResponse
	7,  // 38: UsersService.GetUsersByType:output_type -> UserResponse
	13, // 39: UsersService.CreateUser:output_type -> UpdateOrCreateEntityResponse
	13, // 40: UsersService.UpdateUser:output_type -> UpdateOrCreateEntityResponse
	13, // 41: UsersService.DeleteUser:output_type -> UpdateOrCreateEntityResponse
	13, // 42: UsersService.DeleteProfileById:output_type -> UpdateOrCreateEntityResponse
	13, // 43: UsersService.CreateTeam:output_type -> UpdateOrCreateEntityResponse
	13, // 44: UsersService.UpdateTeam:output_type -> UpdateOrCreateEntityResponse
	13, // 45: UsersService.DeleteTeam:output_type -> UpdateOrCreateEntityResponse
	9,  // 46: UsersService.GetTeamByID:output_type -> TeamResponse
	9,  // 47: UsersService.GetTeamByName:output_type -> TeamResponse
	9,  // 48: UsersService.GetTeamByEmail:output_type -> TeamResponse
	17, // 49: UsersService.GetTeamsByType:output_type -> Team
	9,  // 50: UsersService.GetTeamsByIndustry:output_type -> TeamResponse
	13, // 51: UsersService.CreateGroup:output_type -> UpdateOrCreateEntityResponse
	11, // 52: UsersService.GetGroupByID:output_type -> GroupResponse
	11, // 53: UsersService.GetGroupByName:output_type -> GroupResponse
	11, // 54: UsersService.GetGroupsByType:output_type -> GroupResponse
	13, // 55: UsersService.UpdateGroup:output_type -> UpdateOrCreateEntityResponse
	13, // 56: UsersService.DeleteGroup:output_type -> UpdateOrCreateEntityResponse
	35, // [35:57] is the sub-list for method output_type
	13, // [13:35] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_user_service_proto_init() }
func file_proto_user_service_proto_init() {
	if File_proto_user_service_proto != nil {
		return
	}
	file_proto_common_proto_init()
	file_proto_tables_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_user_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32UserTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32TeamTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32GroupTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringUserTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringTeamTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringGroupTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_user_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrCreateEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_user_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_user_service_proto_goTypes,
		DependencyIndexes: file_proto_user_service_proto_depIdxs,
		MessageInfos:      file_proto_user_service_proto_msgTypes,
	}.Build()
	File_proto_user_service_proto = out.File
	file_proto_user_service_proto_rawDesc = nil
	file_proto_user_service_proto_goTypes = nil
	file_proto_user_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersServiceClient interface {
	// Define Get, Update, Create, Delete requests for all user types
	GetUserByID(ctx context.Context, in *Uint32UserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserByUsername(ctx context.Context, in *StringUserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserByEmail(ctx context.Context, in *StringUserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUsersByType(ctx context.Context, in *GetUsersSearchRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	DeleteProfileById(ctx context.Context, in *Uint32UserTypeRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	// Define Get, Update, Create, Delete requests for all team types
	CreateTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	UpdateTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	DeleteTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	GetTeamByID(ctx context.Context, in *Uint32TeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	GetTeamByName(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	GetTeamByEmail(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	GetTeamsByType(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*Team, error)
	GetTeamsByIndustry(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	// Define Get, Update, Create, Delete requests for all group types
	CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	GetGroupByID(ctx context.Context, in *Uint32GroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	GetGroupByName(ctx context.Context, in *StringGroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	GetGroupsByType(ctx context.Context, in *StringGroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetUserByID(ctx context.Context, in *Uint32UserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByUsername(ctx context.Context, in *StringUserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByEmail(ctx context.Context, in *StringUserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUsersByType(ctx context.Context, in *GetUsersSearchRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetUsersByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteProfileById(ctx context.Context, in *Uint32UserTypeRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteProfileById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamByID(ctx context.Context, in *Uint32TeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamByName(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamByEmail(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamsByType(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamsByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamsByIndustry(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamsByIndustry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetGroupByID(ctx context.Context, in *Uint32GroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetGroupByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetGroupByName(ctx context.Context, in *StringGroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetGroupByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetGroupsByType(ctx context.Context, in *StringGroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetGroupsByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
type UsersServiceServer interface {
	// Define Get, Update, Create, Delete requests for all user types
	GetUserByID(context.Context, *Uint32UserTypeRequest) (*UserResponse, error)
	GetUserByUsername(context.Context, *StringUserTypeRequest) (*UserResponse, error)
	GetUserByEmail(context.Context, *StringUserTypeRequest) (*UserResponse, error)
	GetUsersByType(context.Context, *GetUsersSearchRequest) (*UserResponse, error)
	CreateUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error)
	UpdateUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error)
	DeleteUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error)
	DeleteProfileById(context.Context, *Uint32UserTypeRequest) (*UpdateOrCreateEntityResponse, error)
	// Define Get, Update, Create, Delete requests for all team types
	CreateTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error)
	UpdateTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error)
	DeleteTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error)
	GetTeamByID(context.Context, *Uint32TeamTypeRequest) (*TeamResponse, error)
	GetTeamByName(context.Context, *StringTeamTypeRequest) (*TeamResponse, error)
	GetTeamByEmail(context.Context, *StringTeamTypeRequest) (*TeamResponse, error)
	GetTeamsByType(context.Context, *StringTeamTypeRequest) (*Team, error)
	GetTeamsByIndustry(context.Context, *StringTeamTypeRequest) (*TeamResponse, error)
	// Define Get, Update, Create, Delete requests for all group types
	CreateGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error)
	GetGroupByID(context.Context, *Uint32GroupTypeRequest) (*GroupResponse, error)
	GetGroupByName(context.Context, *StringGroupTypeRequest) (*GroupResponse, error)
	GetGroupsByType(context.Context, *StringGroupTypeRequest) (*GroupResponse, error)
	UpdateGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error)
	DeleteGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error)
}

// UnimplementedUsersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (*UnimplementedUsersServiceServer) GetUserByID(context.Context, *Uint32UserTypeRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (*UnimplementedUsersServiceServer) GetUserByUsername(context.Context, *StringUserTypeRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (*UnimplementedUsersServiceServer) GetUserByEmail(context.Context, *StringUserTypeRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (*UnimplementedUsersServiceServer) GetUsersByType(context.Context, *GetUsersSearchRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByType not implemented")
}
func (*UnimplementedUsersServiceServer) CreateUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUsersServiceServer) UpdateUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUsersServiceServer) DeleteUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedUsersServiceServer) DeleteProfileById(context.Context, *Uint32UserTypeRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfileById not implemented")
}
func (*UnimplementedUsersServiceServer) CreateTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedUsersServiceServer) UpdateTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedUsersServiceServer) DeleteTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamByID(context.Context, *Uint32TeamTypeRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByID not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamByName(context.Context, *StringTeamTypeRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByName not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamByEmail(context.Context, *StringTeamTypeRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByEmail not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamsByType(context.Context, *StringTeamTypeRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsByType not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamsByIndustry(context.Context, *StringTeamTypeRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsByIndustry not implemented")
}
func (*UnimplementedUsersServiceServer) CreateGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedUsersServiceServer) GetGroupByID(context.Context, *Uint32GroupTypeRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByID not implemented")
}
func (*UnimplementedUsersServiceServer) GetGroupByName(context.Context, *StringGroupTypeRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByName not implemented")
}
func (*UnimplementedUsersServiceServer) GetGroupsByType(context.Context, *StringGroupTypeRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsByType not implemented")
}
func (*UnimplementedUsersServiceServer) UpdateGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedUsersServiceServer) DeleteGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}

func RegisterUsersServiceServer(s *grpc.Server, srv UsersServiceServer) {
	s.RegisterService(&_UsersService_serviceDesc, srv)
}

func _UsersService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32UserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByID(ctx, req.(*Uint32UserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringUserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByUsername(ctx, req.(*StringUserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringUserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByEmail(ctx, req.(*StringUserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUsersByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUsersByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUsersByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUsersByType(ctx, req.(*GetUsersSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteProfileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32UserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteProfileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteProfileById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteProfileById(ctx, req.(*Uint32UserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32TeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamByID(ctx, req.(*Uint32TeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamByName(ctx, req.(*StringTeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamByEmail(ctx, req.(*StringTeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamsByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamsByType(ctx, req.(*StringTeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamsByIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamsByIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamsByIndustry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamsByIndustry(ctx, req.(*StringTeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32GroupTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetGroupByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetGroupByID(ctx, req.(*Uint32GroupTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetGroupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringGroupTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetGroupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetGroupByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetGroupByName(ctx, req.(*StringGroupTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetGroupsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringGroupTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetGroupsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetGroupsByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetGroupsByType(ctx, req.(*StringGroupTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByID",
			Handler:    _UsersService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByUsername",
			Handler:    _UsersService_GetUserByUsername_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _UsersService_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUsersByType",
			Handler:    _UsersService_GetUsersByType_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UsersService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersService_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteProfileById",
			Handler:    _UsersService_DeleteProfileById_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _UsersService_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _UsersService_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _UsersService_DeleteTeam_Handler,
		},
		{
			MethodName: "GetTeamByID",
			Handler:    _UsersService_GetTeamByID_Handler,
		},
		{
			MethodName: "GetTeamByName",
			Handler:    _UsersService_GetTeamByName_Handler,
		},
		{
			MethodName: "GetTeamByEmail",
			Handler:    _UsersService_GetTeamByEmail_Handler,
		},
		{
			MethodName: "GetTeamsByType",
			Handler:    _UsersService_GetTeamsByType_Handler,
		},
		{
			MethodName: "GetTeamsByIndustry",
			Handler:    _UsersService_GetTeamsByIndustry_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _UsersService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroupByID",
			Handler:    _UsersService_GetGroupByID_Handler,
		},
		{
			MethodName: "GetGroupByName",
			Handler:    _UsersService_GetGroupByName_Handler,
		},
		{
			MethodName: "GetGroupsByType",
			Handler:    _UsersService_GetGroupsByType_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _UsersService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _UsersService_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_service.proto",
}
