syntax = "proto3";

import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "proto/common.proto";
option go_package = "/proto;user";

message User {
    option (gorm.opts) = {
        ormable: true,
        multi_account: true
    };
    int32 id = 1 [(gorm.field).tag = {type: "integer" primary_key: true}];
    string created_at = 2;
    string updated_at = 3;
    AccountType user_account_type = 4;
    string first_name = 5 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string last_name = 6 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string user_name = 7 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string gender = 8 [(validator.field) = {msg_exists : true}];
    string languages = 9;
    string password = 10 [(validator.field) = {msg_exists : true , string_not_empty: true, length_gt : 10}];
    string password_confirmed = 11 [(validator.field) = {msg_exists : true , string_not_empty: true, length_gt : 10}];
    int32 age = 12 [(validator.field) = {msg_exists : true}];
    string birth_date = 13 [(validator.field) = {msg_exists : true}];
    uint32 phone_number = 14 [(validator.field) = {msg_exists : true}];
    string bio = 15 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string headline = 16 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string intent = 17 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string email = 18 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    Profile profile = 19 [(gorm.field).belongs_to = {}];
    string deleted_at = 20;
    string reset_token = 21;
    string reset_token_expiration = 22;
}

// Based on user
message Profile {
    option (gorm.opts).ormable = true;
    int32 id = 1 [(gorm.field).tag = {type: "integer" primary_key: true}];
    string CreatedAt = 2;
    string UpdatedAt = 3;
    string Title = 4 [(validator.field) = {msg_exists : true , string_not_empty: true}];; // founder, cto, ceo, ...etc
    repeated Experience Experience = 5;
    Address address = 6;
    repeated Education education = 7;
    repeated Skill skills = 8;
    repeated Team user_teams = 9 [(gorm.field).many_to_many = {}];
    repeated Group user_groups = 10 [(gorm.field).many_to_many = {}];
    SocialMedia social_media = 11 [(gorm.field).belongs_to = {}];
    Contact contact = 12 [(gorm.field).belongs_to = {}];
    Settings settings = 13 [(gorm.field).belongs_to = {}];
    repeated Subscriptions subscription = 14 [(gorm.field).belongs_to = {}];
    InvestorFundingDetails investmentDetails = 15 [(gorm.field).belongs_to = {}];
    AccountType profile_type = 16 [(gorm.field).belongs_to = {}];
    repeated Address places_lived_in = 17;
    repeated string languages = 18;
    string deleted_at = 19;
}

// Group entities withold a many to many relationship with the User entities
message Group {
    option (gorm.opts).ormable = true;
    int32 id = 1 [(gorm.field).tag = {type: "integer" primary_key: true}];
    string createdAt  = 2;
    string updatedtAt = 3;
    string Type = 4 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string GroupName = 5 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string GroupBio = 6 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    repeated string Tags = 7 [(validator.field) = {msg_exists : true , string_not_empty: true}];;
    int32 NumberOfGroupMembers = 8;
    repeated Profile GroupMembers = 9;
    AccountType GroupType = 10;
    string deleted_at = 11;
}

message Team {
    option (gorm.opts).ormable = true;
    int32 id = 1 [(gorm.field).tag = {type: "integer" primary_key: true}];
    string createdAt  = 2;
    string updatedtAt = 3;
    string TeamName = 4 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    // Comma separated values of tags
    repeated string Tags = 5 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string TeamEmail = 6 [(validator.field) = {msg_exists : true , string_not_empty: true}];
    string Type = 7 [(validator.field) = {msg_exists : true , string_not_empty: true}]; // investor or startup team
    string TeamBio = 8 [(validator.field) = {msg_exists : true , string_not_empty: true}]; // about the team
    string IndustryOfInterest = 9 [(validator.field) = {msg_exists : true , string_not_empty: true}]; // industry of interest
    string FoundedDate = 10;
    int32 NumberOfEmployees = 12; // size of team
    // team headquarters is a json string comprised of important fields
    // {Headquarters : {city : "Atlanta", state : "Georgia", zip_code : "10001", street : "505 Amherst Way"}}
    Address Headquarters = 13;
    repeated Profile TeamMembers = 15 [(gorm.field).many_to_many = {}];
    repeated Profile Advisors = 16 [(gorm.field).many_to_many = {}];
    SocialMedia SocialMedia = 17;
    Contact Contact = 18;
    Privacy PrivacySetting = 19;
    InvestorFundingDetails InvestorDetails = 20;
    StartupFundingDetails StartupDetails = 21;
    AccountType GroupType = 22;
    string deleted_at = 23;
    repeated Subscriptions Subscriptions = 24;
}

enum InvestorType  {
    banks = 0;
    angel_Investors = 1;
    peer_to_peer_lenders = 2;
    venture_capitalists = 3;
    personal_investors = 4;
}

enum InvestmentStage {
    seed_capital = 0;
    startup_capital = 1;
    early_first_second_stage_capital = 2;
    expansion_second_third_stage_capital = 3;
    mezzanine_bridge_pre_public_stage_capital = 4;
}

message InvestorFundingDetails {
    option (gorm.opts).ormable = true;
    uint32 id = 1 [(gorm.field).tag = {type: "integer" primary_key: true}]; // Id serves as a primary key and references the associated user id
    string CreatedAt = 2;
    string UpdatedAt = 3;
    InvestorType InvestorType = 4;
    InvestmentStage InvestmentStage = 5;
    int32 NumberOfExits = 6;
    int32 NumberOfinvestments = 7;
    int32 NumberOfFunds = 8;
    repeated Investment Investments = 9;
}

message StartupFundingDetails {
    option (gorm.opts).ormable = true;
    uint32 id = 1 [(gorm.field).tag = {type: "integer" primary_key: true}];// Id serves as a primary key and references the associated user id
    string CreatedAt = 2;
    string UpdatedAt = 3;
    Funding Funding = 4;
    Details CompanyDetails = 5;
}

message Funding {
    option (gorm.opts).ormable = true;
    int32 id = 1 [(gorm.field).tag = {type: "integer" primary_key: true}];
    int32 TotalFunding = 2;
    string LatestRound = 3;
    string LatestRoundDate = 4;
    int32 LatestRoundFunding = 5;
    repeated Profile Investors = 6;
    string InvestorType  = 7; //Accelerator
    string InvestmentStage = 8; // Debt, Early Stage Venture, Seed
}
