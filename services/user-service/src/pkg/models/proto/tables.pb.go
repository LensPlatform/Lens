// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.10.0
// source: proto/tables.proto

package user

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InvestorType int32

const (
	InvestorType_banks                InvestorType = 0
	InvestorType_angel_Investors      InvestorType = 1
	InvestorType_peer_to_peer_lenders InvestorType = 2
	InvestorType_venture_capitalists  InvestorType = 3
	InvestorType_personal_investors   InvestorType = 4
)

// Enum value maps for InvestorType.
var (
	InvestorType_name = map[int32]string{
		0: "banks",
		1: "angel_Investors",
		2: "peer_to_peer_lenders",
		3: "venture_capitalists",
		4: "personal_investors",
	}
	InvestorType_value = map[string]int32{
		"banks":                0,
		"angel_Investors":      1,
		"peer_to_peer_lenders": 2,
		"venture_capitalists":  3,
		"personal_investors":   4,
	}
)

func (x InvestorType) Enum() *InvestorType {
	p := new(InvestorType)
	*p = x
	return p
}

func (x InvestorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvestorType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tables_proto_enumTypes[0].Descriptor()
}

func (InvestorType) Type() protoreflect.EnumType {
	return &file_proto_tables_proto_enumTypes[0]
}

func (x InvestorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvestorType.Descriptor instead.
func (InvestorType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{0}
}

type InvestmentStage int32

const (
	InvestmentStage_seed_capital                              InvestmentStage = 0
	InvestmentStage_startup_capital                           InvestmentStage = 1
	InvestmentStage_early_first_second_stage_capital          InvestmentStage = 2
	InvestmentStage_expansion_second_third_stage_capital      InvestmentStage = 3
	InvestmentStage_mezzanine_bridge_pre_public_stage_capital InvestmentStage = 4
)

// Enum value maps for InvestmentStage.
var (
	InvestmentStage_name = map[int32]string{
		0: "seed_capital",
		1: "startup_capital",
		2: "early_first_second_stage_capital",
		3: "expansion_second_third_stage_capital",
		4: "mezzanine_bridge_pre_public_stage_capital",
	}
	InvestmentStage_value = map[string]int32{
		"seed_capital":                              0,
		"startup_capital":                           1,
		"early_first_second_stage_capital":          2,
		"expansion_second_third_stage_capital":      3,
		"mezzanine_bridge_pre_public_stage_capital": 4,
	}
)

func (x InvestmentStage) Enum() *InvestmentStage {
	p := new(InvestmentStage)
	*p = x
	return p
}

func (x InvestmentStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvestmentStage) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tables_proto_enumTypes[1].Descriptor()
}

func (InvestmentStage) Type() protoreflect.EnumType {
	return &file_proto_tables_proto_enumTypes[1]
}

func (x InvestmentStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvestmentStage.Descriptor instead.
func (InvestmentStage) EnumDescriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{1}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            string      `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string      `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UserAccountType      AccountType `protobuf:"varint,4,opt,name=user_account_type,json=userAccountType,proto3,enum=AccountType" json:"user_account_type,omitempty"`
	FirstName            string      `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string      `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	UserName             string      `protobuf:"bytes,7,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Gender               string      `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Languages            string      `protobuf:"bytes,9,opt,name=languages,proto3" json:"languages,omitempty"`
	Password             string      `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`
	PasswordConfirmed    string      `protobuf:"bytes,11,opt,name=password_confirmed,json=passwordConfirmed,proto3" json:"password_confirmed,omitempty"`
	Age                  int32       `protobuf:"varint,12,opt,name=age,proto3" json:"age,omitempty"`
	BirthDate            string      `protobuf:"bytes,13,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	PhoneNumber          uint32      `protobuf:"varint,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Bio                  string      `protobuf:"bytes,15,opt,name=bio,proto3" json:"bio,omitempty"`
	Headline             string      `protobuf:"bytes,16,opt,name=headline,proto3" json:"headline,omitempty"`
	Intent               string      `protobuf:"bytes,17,opt,name=intent,proto3" json:"intent,omitempty"`
	Email                string      `protobuf:"bytes,18,opt,name=email,proto3" json:"email,omitempty"`
	Profile              *Profile    `protobuf:"bytes,19,opt,name=profile,proto3" json:"profile,omitempty"`
	DeletedAt            string      `protobuf:"bytes,20,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	ResetToken           string      `protobuf:"bytes,21,opt,name=reset_token,json=resetToken,proto3" json:"reset_token,omitempty"`
	ResetTokenExpiration string      `protobuf:"bytes,22,opt,name=reset_token_expiration,json=resetTokenExpiration,proto3" json:"reset_token_expiration,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tables_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tables_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *User) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *User) GetUserAccountType() AccountType {
	if x != nil {
		return x.UserAccountType
	}
	return AccountType_RegularUser
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *User) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *User) GetLanguages() string {
	if x != nil {
		return x.Languages
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetPasswordConfirmed() string {
	if x != nil {
		return x.PasswordConfirmed
	}
	return ""
}

func (x *User) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *User) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *User) GetPhoneNumber() uint32 {
	if x != nil {
		return x.PhoneNumber
	}
	return 0
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *User) GetIntent() string {
	if x != nil {
		return x.Intent
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *User) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *User) GetResetToken() string {
	if x != nil {
		return x.ResetToken
	}
	return ""
}

func (x *User) GetResetTokenExpiration() string {
	if x != nil {
		return x.ResetTokenExpiration
	}
	return ""
}

// Based on user
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt         string                  `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         string                  `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Title             string                  `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Experience        []*Experience           `protobuf:"bytes,5,rep,name=Experience,proto3" json:"Experience,omitempty"`
	Address           *Address                `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Education         []*Education            `protobuf:"bytes,7,rep,name=education,proto3" json:"education,omitempty"`
	Skills            []*Skill                `protobuf:"bytes,8,rep,name=skills,proto3" json:"skills,omitempty"`
	UserTeams         []*Team                 `protobuf:"bytes,9,rep,name=user_teams,json=userTeams,proto3" json:"user_teams,omitempty"`
	UserGroups        []*Group                `protobuf:"bytes,10,rep,name=user_groups,json=userGroups,proto3" json:"user_groups,omitempty"`
	SocialMedia       *SocialMedia            `protobuf:"bytes,11,opt,name=social_media,json=socialMedia,proto3" json:"social_media,omitempty"`
	Contact           *Contact                `protobuf:"bytes,12,opt,name=contact,proto3" json:"contact,omitempty"`
	Settings          *Settings               `protobuf:"bytes,13,opt,name=settings,proto3" json:"settings,omitempty"`
	Subscription      []*Subscriptions        `protobuf:"bytes,14,rep,name=subscription,proto3" json:"subscription,omitempty"`
	InvestmentDetails *InvestorFundingDetails `protobuf:"bytes,15,opt,name=investmentDetails,proto3" json:"investmentDetails,omitempty"`
	ProfileType       AccountType             `protobuf:"varint,16,opt,name=profile_type,json=profileType,proto3,enum=AccountType" json:"profile_type,omitempty"`
	PlacesLivedIn     []*Address              `protobuf:"bytes,17,rep,name=places_lived_in,json=placesLivedIn,proto3" json:"places_lived_in,omitempty"`
	Languages         []string                `protobuf:"bytes,18,rep,name=languages,proto3" json:"languages,omitempty"`
	DeletedAt         string                  `protobuf:"bytes,19,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tables_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tables_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{1}
}

func (x *Profile) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Profile) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Profile) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Profile) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Profile) GetExperience() []*Experience {
	if x != nil {
		return x.Experience
	}
	return nil
}

func (x *Profile) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Profile) GetEducation() []*Education {
	if x != nil {
		return x.Education
	}
	return nil
}

func (x *Profile) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *Profile) GetUserTeams() []*Team {
	if x != nil {
		return x.UserTeams
	}
	return nil
}

func (x *Profile) GetUserGroups() []*Group {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *Profile) GetSocialMedia() *SocialMedia {
	if x != nil {
		return x.SocialMedia
	}
	return nil
}

func (x *Profile) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Profile) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Profile) GetSubscription() []*Subscriptions {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *Profile) GetInvestmentDetails() *InvestorFundingDetails {
	if x != nil {
		return x.InvestmentDetails
	}
	return nil
}

func (x *Profile) GetProfileType() AccountType {
	if x != nil {
		return x.ProfileType
	}
	return AccountType_RegularUser
}

func (x *Profile) GetPlacesLivedIn() []*Address {
	if x != nil {
		return x.PlacesLivedIn
	}
	return nil
}

func (x *Profile) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Profile) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

// Group entities withold a many to many relationship with the User entities
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            string      `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedtAt           string      `protobuf:"bytes,3,opt,name=updatedtAt,proto3" json:"updatedtAt,omitempty"`
	Type                 string      `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	GroupName            string      `protobuf:"bytes,5,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	GroupBio             string      `protobuf:"bytes,6,opt,name=GroupBio,proto3" json:"GroupBio,omitempty"`
	Tags                 []string    `protobuf:"bytes,7,rep,name=Tags,proto3" json:"Tags,omitempty"`
	NumberOfGroupMembers int32       `protobuf:"varint,8,opt,name=NumberOfGroupMembers,proto3" json:"NumberOfGroupMembers,omitempty"`
	GroupMembers         []*Profile  `protobuf:"bytes,9,rep,name=GroupMembers,proto3" json:"GroupMembers,omitempty"`
	GroupType            AccountType `protobuf:"varint,10,opt,name=GroupType,proto3,enum=AccountType" json:"GroupType,omitempty"`
	DeletedAt            string      `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tables_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tables_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{2}
}

func (x *Group) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Group) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Group) GetUpdatedtAt() string {
	if x != nil {
		return x.UpdatedtAt
	}
	return ""
}

func (x *Group) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Group) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Group) GetGroupBio() string {
	if x != nil {
		return x.GroupBio
	}
	return ""
}

func (x *Group) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Group) GetNumberOfGroupMembers() int32 {
	if x != nil {
		return x.NumberOfGroupMembers
	}
	return 0
}

func (x *Group) GetGroupMembers() []*Profile {
	if x != nil {
		return x.GroupMembers
	}
	return nil
}

func (x *Group) GetGroupType() AccountType {
	if x != nil {
		return x.GroupType
	}
	return AccountType_RegularUser
}

func (x *Group) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt  string `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedtAt string `protobuf:"bytes,3,opt,name=updatedtAt,proto3" json:"updatedtAt,omitempty"`
	TeamName   string `protobuf:"bytes,4,opt,name=TeamName,proto3" json:"TeamName,omitempty"`
	// Comma separated values of tags
	Tags               []string `protobuf:"bytes,5,rep,name=Tags,proto3" json:"Tags,omitempty"`
	TeamEmail          string   `protobuf:"bytes,6,opt,name=TeamEmail,proto3" json:"TeamEmail,omitempty"`
	Type               string   `protobuf:"bytes,7,opt,name=Type,proto3" json:"Type,omitempty"`                             // investor or startup team
	TeamBio            string   `protobuf:"bytes,8,opt,name=TeamBio,proto3" json:"TeamBio,omitempty"`                       // about the team
	IndustryOfInterest string   `protobuf:"bytes,9,opt,name=IndustryOfInterest,proto3" json:"IndustryOfInterest,omitempty"` // industry of interest
	FoundedDate        string   `protobuf:"bytes,10,opt,name=FoundedDate,proto3" json:"FoundedDate,omitempty"`
	NumberOfEmployees  int32    `protobuf:"varint,12,opt,name=NumberOfEmployees,proto3" json:"NumberOfEmployees,omitempty"` // size of team
	// team headquarters is a json string comprised of important fields
	// {Headquarters : {city : "Atlanta", state : "Georgia", zip_code : "10001", street : "505 Amherst Way"}}
	Headquarters    *Address                `protobuf:"bytes,13,opt,name=Headquarters,proto3" json:"Headquarters,omitempty"`
	TeamMembers     []*Profile              `protobuf:"bytes,15,rep,name=TeamMembers,proto3" json:"TeamMembers,omitempty"`
	Advisors        []*Profile              `protobuf:"bytes,16,rep,name=Advisors,proto3" json:"Advisors,omitempty"`
	SocialMedia     *SocialMedia            `protobuf:"bytes,17,opt,name=SocialMedia,proto3" json:"SocialMedia,omitempty"`
	Contact         *Contact                `protobuf:"bytes,18,opt,name=Contact,proto3" json:"Contact,omitempty"`
	PrivacySetting  *Privacy                `protobuf:"bytes,19,opt,name=PrivacySetting,proto3" json:"PrivacySetting,omitempty"`
	InvestorDetails *InvestorFundingDetails `protobuf:"bytes,20,opt,name=InvestorDetails,proto3" json:"InvestorDetails,omitempty"`
	StartupDetails  *StartupFundingDetails  `protobuf:"bytes,21,opt,name=StartupDetails,proto3" json:"StartupDetails,omitempty"`
	GroupType       AccountType             `protobuf:"varint,22,opt,name=GroupType,proto3,enum=AccountType" json:"GroupType,omitempty"`
	DeletedAt       string                  `protobuf:"bytes,23,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Subscriptions   []*Subscriptions        `protobuf:"bytes,24,rep,name=Subscriptions,proto3" json:"Subscriptions,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tables_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tables_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{3}
}

func (x *Team) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Team) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Team) GetUpdatedtAt() string {
	if x != nil {
		return x.UpdatedtAt
	}
	return ""
}

func (x *Team) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *Team) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Team) GetTeamEmail() string {
	if x != nil {
		return x.TeamEmail
	}
	return ""
}

func (x *Team) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Team) GetTeamBio() string {
	if x != nil {
		return x.TeamBio
	}
	return ""
}

func (x *Team) GetIndustryOfInterest() string {
	if x != nil {
		return x.IndustryOfInterest
	}
	return ""
}

func (x *Team) GetFoundedDate() string {
	if x != nil {
		return x.FoundedDate
	}
	return ""
}

func (x *Team) GetNumberOfEmployees() int32 {
	if x != nil {
		return x.NumberOfEmployees
	}
	return 0
}

func (x *Team) GetHeadquarters() *Address {
	if x != nil {
		return x.Headquarters
	}
	return nil
}

func (x *Team) GetTeamMembers() []*Profile {
	if x != nil {
		return x.TeamMembers
	}
	return nil
}

func (x *Team) GetAdvisors() []*Profile {
	if x != nil {
		return x.Advisors
	}
	return nil
}

func (x *Team) GetSocialMedia() *SocialMedia {
	if x != nil {
		return x.SocialMedia
	}
	return nil
}

func (x *Team) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Team) GetPrivacySetting() *Privacy {
	if x != nil {
		return x.PrivacySetting
	}
	return nil
}

func (x *Team) GetInvestorDetails() *InvestorFundingDetails {
	if x != nil {
		return x.InvestorDetails
	}
	return nil
}

func (x *Team) GetStartupDetails() *StartupFundingDetails {
	if x != nil {
		return x.StartupDetails
	}
	return nil
}

func (x *Team) GetGroupType() AccountType {
	if x != nil {
		return x.GroupType
	}
	return AccountType_RegularUser
}

func (x *Team) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Team) GetSubscriptions() []*Subscriptions {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type InvestorFundingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Id serves as a primary key and references the associated user id
	CreatedAt           string          `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt           string          `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	InvestorType        InvestorType    `protobuf:"varint,4,opt,name=InvestorType,proto3,enum=InvestorType" json:"InvestorType,omitempty"`
	InvestmentStage     InvestmentStage `protobuf:"varint,5,opt,name=InvestmentStage,proto3,enum=InvestmentStage" json:"InvestmentStage,omitempty"`
	NumberOfExits       int32           `protobuf:"varint,6,opt,name=NumberOfExits,proto3" json:"NumberOfExits,omitempty"`
	NumberOfinvestments int32           `protobuf:"varint,7,opt,name=NumberOfinvestments,proto3" json:"NumberOfinvestments,omitempty"`
	NumberOfFunds       int32           `protobuf:"varint,8,opt,name=NumberOfFunds,proto3" json:"NumberOfFunds,omitempty"`
	Investments         []*Investment   `protobuf:"bytes,9,rep,name=Investments,proto3" json:"Investments,omitempty"`
}

func (x *InvestorFundingDetails) Reset() {
	*x = InvestorFundingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tables_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestorFundingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestorFundingDetails) ProtoMessage() {}

func (x *InvestorFundingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tables_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestorFundingDetails.ProtoReflect.Descriptor instead.
func (*InvestorFundingDetails) Descriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{4}
}

func (x *InvestorFundingDetails) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestorFundingDetails) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *InvestorFundingDetails) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *InvestorFundingDetails) GetInvestorType() InvestorType {
	if x != nil {
		return x.InvestorType
	}
	return InvestorType_banks
}

func (x *InvestorFundingDetails) GetInvestmentStage() InvestmentStage {
	if x != nil {
		return x.InvestmentStage
	}
	return InvestmentStage_seed_capital
}

func (x *InvestorFundingDetails) GetNumberOfExits() int32 {
	if x != nil {
		return x.NumberOfExits
	}
	return 0
}

func (x *InvestorFundingDetails) GetNumberOfinvestments() int32 {
	if x != nil {
		return x.NumberOfinvestments
	}
	return 0
}

func (x *InvestorFundingDetails) GetNumberOfFunds() int32 {
	if x != nil {
		return x.NumberOfFunds
	}
	return 0
}

func (x *InvestorFundingDetails) GetInvestments() []*Investment {
	if x != nil {
		return x.Investments
	}
	return nil
}

type StartupFundingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Id serves as a primary key and references the associated user id
	CreatedAt      string   `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      string   `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Funding        *Funding `protobuf:"bytes,4,opt,name=Funding,proto3" json:"Funding,omitempty"`
	CompanyDetails *Details `protobuf:"bytes,5,opt,name=CompanyDetails,proto3" json:"CompanyDetails,omitempty"`
}

func (x *StartupFundingDetails) Reset() {
	*x = StartupFundingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tables_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartupFundingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartupFundingDetails) ProtoMessage() {}

func (x *StartupFundingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tables_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartupFundingDetails.ProtoReflect.Descriptor instead.
func (*StartupFundingDetails) Descriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{5}
}

func (x *StartupFundingDetails) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StartupFundingDetails) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *StartupFundingDetails) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *StartupFundingDetails) GetFunding() *Funding {
	if x != nil {
		return x.Funding
	}
	return nil
}

func (x *StartupFundingDetails) GetCompanyDetails() *Details {
	if x != nil {
		return x.CompanyDetails
	}
	return nil
}

type Funding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TotalFunding       int32      `protobuf:"varint,2,opt,name=TotalFunding,proto3" json:"TotalFunding,omitempty"`
	LatestRound        string     `protobuf:"bytes,3,opt,name=LatestRound,proto3" json:"LatestRound,omitempty"`
	LatestRoundDate    string     `protobuf:"bytes,4,opt,name=LatestRoundDate,proto3" json:"LatestRoundDate,omitempty"`
	LatestRoundFunding int32      `protobuf:"varint,5,opt,name=LatestRoundFunding,proto3" json:"LatestRoundFunding,omitempty"`
	Investors          []*Profile `protobuf:"bytes,6,rep,name=Investors,proto3" json:"Investors,omitempty"`
	InvestorType       string     `protobuf:"bytes,7,opt,name=InvestorType,proto3" json:"InvestorType,omitempty"`       //Accelerator
	InvestmentStage    string     `protobuf:"bytes,8,opt,name=InvestmentStage,proto3" json:"InvestmentStage,omitempty"` // Debt, Early Stage Venture, Seed
}

func (x *Funding) Reset() {
	*x = Funding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tables_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Funding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Funding) ProtoMessage() {}

func (x *Funding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tables_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Funding.ProtoReflect.Descriptor instead.
func (*Funding) Descriptor() ([]byte, []int) {
	return file_proto_tables_proto_rawDescGZIP(), []int{6}
}

func (x *Funding) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Funding) GetTotalFunding() int32 {
	if x != nil {
		return x.TotalFunding
	}
	return 0
}

func (x *Funding) GetLatestRound() string {
	if x != nil {
		return x.LatestRound
	}
	return ""
}

func (x *Funding) GetLatestRoundDate() string {
	if x != nil {
		return x.LatestRoundDate
	}
	return ""
}

func (x *Funding) GetLatestRoundFunding() int32 {
	if x != nil {
		return x.LatestRoundFunding
	}
	return 0
}

func (x *Funding) GetInvestors() []*Profile {
	if x != nil {
		return x.Investors
	}
	return nil
}

func (x *Funding) GetInvestorType() string {
	if x != nil {
		return x.InvestorType
	}
	return ""
}

func (x *Funding) GetInvestmentStage() string {
	if x != nil {
		return x.InvestmentStage
	}
	return ""
}

var File_proto_tables_proto protoreflect.FileDescriptor

var file_proto_tables_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69,
	0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x06, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x11, 0xba, 0xb9, 0x19, 0x0d, 0x0a, 0x0b, 0x12, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x20, 0x01, 0x58,
	0x01, 0x70, 0x0a, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a,
	0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x20,
	0x01, 0x58, 0x01, 0x70, 0x0a, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x03, 0x62, 0x69, 0x6f,
	0x12, 0x24, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01,
	0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58,
	0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x08, 0x01, 0x20, 0x01, 0x22, 0xd1, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xba, 0xb9,
	0x19, 0x0d, 0x0a, 0x0b, 0x12, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x28, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1e, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2d,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x22, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x11, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x22, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x76, 0x65,
	0x64, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa7, 0x03, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11,
	0xba, 0xb9, 0x19, 0x0d, 0x0a, 0x0b, 0x12, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x28,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x74, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f,
	0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x6f, 0x12,
	0x1c, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x2c, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xc1, 0x07, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xba, 0xb9, 0x19, 0x0d, 0x0a, 0x0b, 0x12,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x74, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x08,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x26, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01, 0x52, 0x09, 0x54,
	0x65, 0x61, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58,
	0x01, 0x52, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x12, 0x49, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x20, 0x01, 0x58, 0x01,
	0x52, 0x12, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x32, 0x00, 0x52, 0x08, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0b, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x22, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0f, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x46,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x9b, 0x03, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xba,
	0xb9, 0x19, 0x0d, 0x0a, 0x0b, 0x12, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x28, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x31, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0f,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x78, 0x69, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x45, 0x78, 0x69, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xba, 0xb9, 0x19, 0x0d,
	0x0a, 0x0b, 0x12, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x28, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a,
	0x07, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x30, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xca, 0x02, 0x0a, 0x07,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x11, 0xba, 0xb9, 0x19, 0x0d, 0x0a, 0x0b, 0x12, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x09, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x2a, 0x79, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x61, 0x6e, 0x6b,
	0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x73, 0x10, 0x04, 0x2a, 0xb7, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x2d,
	0x0a, 0x29, 0x6d, 0x65, 0x7a, 0x7a, 0x61, 0x6e, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10, 0x04, 0x42, 0x0d, 0x5a,
	0x0b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tables_proto_rawDescOnce sync.Once
	file_proto_tables_proto_rawDescData = file_proto_tables_proto_rawDesc
)

func file_proto_tables_proto_rawDescGZIP() []byte {
	file_proto_tables_proto_rawDescOnce.Do(func() {
		file_proto_tables_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tables_proto_rawDescData)
	})
	return file_proto_tables_proto_rawDescData
}

var file_proto_tables_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_tables_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_tables_proto_goTypes = []interface{}{
	(InvestorType)(0),              // 0: InvestorType
	(InvestmentStage)(0),           // 1: InvestmentStage
	(*User)(nil),                   // 2: User
	(*Profile)(nil),                // 3: Profile
	(*Group)(nil),                  // 4: Group
	(*Team)(nil),                   // 5: Team
	(*InvestorFundingDetails)(nil), // 6: InvestorFundingDetails
	(*StartupFundingDetails)(nil),  // 7: StartupFundingDetails
	(*Funding)(nil),                // 8: Funding
	(AccountType)(0),               // 9: AccountType
	(*Experience)(nil),             // 10: Experience
	(*Address)(nil),                // 11: Address
	(*Education)(nil),              // 12: Education
	(*Skill)(nil),                  // 13: Skill
	(*SocialMedia)(nil),            // 14: SocialMedia
	(*Contact)(nil),                // 15: Contact
	(*Settings)(nil),               // 16: Settings
	(*Subscriptions)(nil),          // 17: Subscriptions
	(*Privacy)(nil),                // 18: Privacy
	(*Investment)(nil),             // 19: Investment
	(*Details)(nil),                // 20: Details
}
var file_proto_tables_proto_depIdxs = []int32{
	9,  // 0: User.user_account_type:type_name -> AccountType
	3,  // 1: User.profile:type_name -> Profile
	10, // 2: Profile.Experience:type_name -> Experience
	11, // 3: Profile.address:type_name -> Address
	12, // 4: Profile.education:type_name -> Education
	13, // 5: Profile.skills:type_name -> Skill
	5,  // 6: Profile.user_teams:type_name -> Team
	4,  // 7: Profile.user_groups:type_name -> Group
	14, // 8: Profile.social_media:type_name -> SocialMedia
	15, // 9: Profile.contact:type_name -> Contact
	16, // 10: Profile.settings:type_name -> Settings
	17, // 11: Profile.subscription:type_name -> Subscriptions
	6,  // 12: Profile.investmentDetails:type_name -> InvestorFundingDetails
	9,  // 13: Profile.profile_type:type_name -> AccountType
	11, // 14: Profile.places_lived_in:type_name -> Address
	3,  // 15: Group.GroupMembers:type_name -> Profile
	9,  // 16: Group.GroupType:type_name -> AccountType
	11, // 17: Team.Headquarters:type_name -> Address
	3,  // 18: Team.TeamMembers:type_name -> Profile
	3,  // 19: Team.Advisors:type_name -> Profile
	14, // 20: Team.SocialMedia:type_name -> SocialMedia
	15, // 21: Team.Contact:type_name -> Contact
	18, // 22: Team.PrivacySetting:type_name -> Privacy
	6,  // 23: Team.InvestorDetails:type_name -> InvestorFundingDetails
	7,  // 24: Team.StartupDetails:type_name -> StartupFundingDetails
	9,  // 25: Team.GroupType:type_name -> AccountType
	17, // 26: Team.Subscriptions:type_name -> Subscriptions
	0,  // 27: InvestorFundingDetails.InvestorType:type_name -> InvestorType
	1,  // 28: InvestorFundingDetails.InvestmentStage:type_name -> InvestmentStage
	19, // 29: InvestorFundingDetails.Investments:type_name -> Investment
	8,  // 30: StartupFundingDetails.Funding:type_name -> Funding
	20, // 31: StartupFundingDetails.CompanyDetails:type_name -> Details
	3,  // 32: Funding.Investors:type_name -> Profile
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_proto_tables_proto_init() }
func file_proto_tables_proto_init() {
	if File_proto_tables_proto != nil {
		return
	}
	file_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_tables_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tables_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tables_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tables_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tables_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestorFundingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tables_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartupFundingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tables_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Funding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tables_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tables_proto_goTypes,
		DependencyIndexes: file_proto_tables_proto_depIdxs,
		EnumInfos:         file_proto_tables_proto_enumTypes,
		MessageInfos:      file_proto_tables_proto_msgTypes,
	}.Build()
	File_proto_tables_proto = out.File
	file_proto_tables_proto_rawDesc = nil
	file_proto_tables_proto_goTypes = nil
	file_proto_tables_proto_depIdxs = nil
}
