// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/tables.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *User) Validate() error {
	if this.FirstName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("FirstName", fmt.Errorf(`value '%v' must not be an empty string`, this.FirstName))
	}
	if this.LastName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("LastName", fmt.Errorf(`value '%v' must not be an empty string`, this.LastName))
	}
	if this.UserName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("UserName", fmt.Errorf(`value '%v' must not be an empty string`, this.UserName))
	}
	if this.Password == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Password", fmt.Errorf(`value '%v' must not be an empty string`, this.Password))
	}
	if !(len(this.Password) > 10) {
		return github_com_mwitkow_go_proto_validators.FieldError("Password", fmt.Errorf(`value '%v' must have a length greater than '10'`, this.Password))
	}
	if this.PasswordConfirmed == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PasswordConfirmed", fmt.Errorf(`value '%v' must not be an empty string`, this.PasswordConfirmed))
	}
	if !(len(this.PasswordConfirmed) > 10) {
		return github_com_mwitkow_go_proto_validators.FieldError("PasswordConfirmed", fmt.Errorf(`value '%v' must have a length greater than '10'`, this.PasswordConfirmed))
	}
	if this.Bio == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Bio", fmt.Errorf(`value '%v' must not be an empty string`, this.Bio))
	}
	if this.Headline == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Headline", fmt.Errorf(`value '%v' must not be an empty string`, this.Headline))
	}
	if this.Intent == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Intent", fmt.Errorf(`value '%v' must not be an empty string`, this.Intent))
	}
	if this.Email == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Email", fmt.Errorf(`value '%v' must not be an empty string`, this.Email))
	}
	if this.Profile != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Profile); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Profile", err)
		}
	}
	return nil
}
func (this *Profile) Validate() error {
	if this.Title == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Title", fmt.Errorf(`value '%v' must not be an empty string`, this.Title))
	}
	for _, item := range this.Experience {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Experience", err)
			}
		}
	}
	if this.Address != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Address); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Address", err)
		}
	}
	for _, item := range this.Education {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Education", err)
			}
		}
	}
	for _, item := range this.Skills {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Skills", err)
			}
		}
	}
	for _, item := range this.UserTeams {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("UserTeams", err)
			}
		}
	}
	for _, item := range this.UserGroups {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("UserGroups", err)
			}
		}
	}
	if this.SocialMedia != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.SocialMedia); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("SocialMedia", err)
		}
	}
	if this.Contact != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Contact); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Contact", err)
		}
	}
	if this.Settings != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Settings); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Settings", err)
		}
	}
	for _, item := range this.Subscription {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Subscription", err)
			}
		}
	}
	if this.InvestmentDetails != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.InvestmentDetails); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("InvestmentDetails", err)
		}
	}
	for _, item := range this.PlacesLivedIn {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("PlacesLivedIn", err)
			}
		}
	}
	return nil
}
func (this *Group) Validate() error {
	if this.Type == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Type", fmt.Errorf(`value '%v' must not be an empty string`, this.Type))
	}
	if this.GroupName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("GroupName", fmt.Errorf(`value '%v' must not be an empty string`, this.GroupName))
	}
	if this.GroupBio == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("GroupBio", fmt.Errorf(`value '%v' must not be an empty string`, this.GroupBio))
	}
	for _, item := range this.Tags {
		if item == "" {
			return github_com_mwitkow_go_proto_validators.FieldError("Tags", fmt.Errorf(`value '%v' must not be an empty string`, item))
		}
	}
	for _, item := range this.GroupMembers {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("GroupMembers", err)
			}
		}
	}
	return nil
}
func (this *Team) Validate() error {
	if this.TeamName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TeamName", fmt.Errorf(`value '%v' must not be an empty string`, this.TeamName))
	}
	for _, item := range this.Tags {
		if item == "" {
			return github_com_mwitkow_go_proto_validators.FieldError("Tags", fmt.Errorf(`value '%v' must not be an empty string`, item))
		}
	}
	if this.TeamEmail == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TeamEmail", fmt.Errorf(`value '%v' must not be an empty string`, this.TeamEmail))
	}
	if this.Type == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Type", fmt.Errorf(`value '%v' must not be an empty string`, this.Type))
	}
	if this.TeamBio == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TeamBio", fmt.Errorf(`value '%v' must not be an empty string`, this.TeamBio))
	}
	if this.IndustryOfInterest == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("IndustryOfInterest", fmt.Errorf(`value '%v' must not be an empty string`, this.IndustryOfInterest))
	}
	if this.Headquarters != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Headquarters); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Headquarters", err)
		}
	}
	for _, item := range this.TeamMembers {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("TeamMembers", err)
			}
		}
	}
	for _, item := range this.Advisors {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Advisors", err)
			}
		}
	}
	if this.SocialMedia != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.SocialMedia); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("SocialMedia", err)
		}
	}
	if this.Contact != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Contact); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Contact", err)
		}
	}
	if this.PrivacySetting != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.PrivacySetting); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("PrivacySetting", err)
		}
	}
	if this.InvestorDetails != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.InvestorDetails); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("InvestorDetails", err)
		}
	}
	if this.StartupDetails != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.StartupDetails); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("StartupDetails", err)
		}
	}
	for _, item := range this.Subscriptions {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Subscriptions", err)
			}
		}
	}
	return nil
}
func (this *InvestorFundingDetails) Validate() error {
	for _, item := range this.Investments {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Investments", err)
			}
		}
	}
	return nil
}
func (this *StartupFundingDetails) Validate() error {
	if this.Funding != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Funding); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Funding", err)
		}
	}
	if this.CompanyDetails != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CompanyDetails); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CompanyDetails", err)
		}
	}
	return nil
}
func (this *Funding) Validate() error {
	for _, item := range this.Investors {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Investors", err)
			}
		}
	}
	return nil
}
